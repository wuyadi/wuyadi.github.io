<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wuyadi.github.io</id>
    <title>一个兴趣使然的程序员</title>
    <updated>2021-11-25T03:01:16.283Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wuyadi.github.io"/>
    <link rel="self" href="https://wuyadi.github.io/atom.xml"/>
    <subtitle>知耻近乎勇</subtitle>
    <logo>https://wuyadi.github.io/images/avatar.png</logo>
    <icon>https://wuyadi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 一个兴趣使然的程序员</rights>
    <entry>
        <title type="html"><![CDATA[用python脚本删除无效redis key]]></title>
        <id>https://wuyadi.github.io/post/yong-python-jiao-ben-shan-chu-wu-xiao-redis-key/</id>
        <link href="https://wuyadi.github.io/post/yong-python-jiao-ben-shan-chu-wu-xiao-redis-key/">
        </link>
        <updated>2021-11-22T11:39:23.000Z</updated>
        <summary type="html"><![CDATA[<p>这天运维找我反馈说zgyh这个客户的redis内存越来越高，让我们先自查下是否有程序不合理的一直往redis写key。<br>
在排查了java go python 和php 的代码后，我信心满满的给了他一个key的列表和统计计数的脚本</p>
<pre><code class="language-shell">#!/bin/bash

A=$0
B=${A##*/}
C=${B%.*}
running_file_name=$C
running_flag=&quot;run.$running_file_name&quot;

REDIS_CLIENT='redis-cli -a xxxx -x'
function process {
    echo $0
    index=-1
    count=0
    step=100000
    while ((index!=0))
    do
      if [ $index -le 0 ];then
        index=0
      fi
      echo &quot;scan $index match $1 count $step&quot; | $REDIS_CLIENT &gt; $running_file_name.cache
      read index &lt;&lt;&lt; `head -1 $running_file_name.cache`
      read inc &lt;&lt;&lt; `cat $running_file_name.cache | wc -l`
      inc=$((inc - 1))
      if [ $? -ne 0 ];then
        break
      fi
      count=$((count + inc))
    done
    echo &quot;$1 count:&quot;$count
}
#
if [ $# -ne 1 ];then
    echo &quot;$0 &lt;pars&gt;&quot;
    exit 0
fi
#
if [ -f &quot;$running_flag&quot; ] ; then
    echo &quot;is running...&quot;
    exit 0
fi
#
touch $running_flag
#
echo &quot;processing....&quot;
echo $*
process $*
#
rm -rf $running_flag
#
echo &quot;ok!&quot;
</code></pre>
<p>和查bigkey的方法</p>
<pre><code class="language-shell">redis-cli -c -p 6379  -a 密码  --bigkeys 
</code></pre>
<p>运维反馈bigkeys因为版本问题访问不了，根据我提供的业务key查的数量最大的也就W。但是现在生产的key已经达到了几百W。</p>
<p>过了几天，运维反馈说找到了那些幽灵的key，是32位的随机字幕+数字，没有赋值，最要命的是没有设置过期时间且确定是从我们的服务机器发出的请求。</p>
<p>再次走查代码，依旧没有头绪，测试环境的redis环境也没有这些奇怪的key。殚思竭虑两天后，猛地想起这个数据格式和php的session_id很类似。于是检查php的入口方法，果然找到问题。</p>
<pre><code class="language-php">        $time = $this-&gt;isSession();
        if ($this-&gt;skipCheck) return true;
</code></pre>
<p>这个isSession方法</p>
<pre><code class="language-php">    protected function isSession() {
        if ($this-&gt;AccessField == 'FILE') {
            return $this-&gt;isFSession();
        } else {
            return $this-&gt;isRSession();
        }
    }
</code></pre>
<p>在类型不是FILE的情况下会走isRSession</p>
<pre><code class="language-php">    private function isRSession() {
        $PHPSESSID = $_COOKIE['PHPSESSID'];
        if (empty($PHPSESSID)) {
            return;
        }

        $data = S($PHPSESSID);

        if (empty($data)) {
            return;
        }
        /*从缓存服务器同步到本地*/
        if ($data['SYNCH']) {
            $data = array(
                &quot;DATA&quot; =&gt; $data['DATA'],
                &quot;EXPIRE&quot; =&gt; time(),
                &quot;REGIST&quot; =&gt; time()
            );
            $data['SYNCH'] = false;
            /*更新缓存服务器状态*/
        }

        if (!empty($_SESSION[$this-&gt;AccessName])) {
            /*已同步到现在的服务器上*/
            return $_SESSION[$this-&gt;AccessName]['EXPIRE'];
        }

    }
</code></pre>
<p>问题就出在S($PHPSESSID)这句，S方法内容如下</p>
<pre><code class="language-php">function S($name,$value='',$options=null) {
    static $cache   =   '';
    if(strtoupper(C('DATA_CACHE_TYPE')) == 'REDISMS'){
        $cache = Think\Cache\Driver\Redisms::getInstance();
        if(''=== $value){ // 获取缓存
            return $cache-&gt;get($name);
        }elseif(is_null($value)) { // 删除缓存
            return $cache-&gt;rm($name);
        }else{
            if(is_array($options)) {
                $expire     =   isset($options['expire'])?$options['expire']:NULL;
            }else{
                $expire     =   is_numeric($options)?$options:NULL;
            }
            return $cache-&gt;set($name, $value, $expire);
        }
    }

    if(is_array($options)){
        // 缓存操作的同时初始化
        $type       =   isset($options['type'])?$options['type']:'';
        $cache      =   Think\Cache::getInstance($type,$options);
    }elseif(is_array($name)) { // 缓存初始化
        $type       =   isset($name['type'])?$name['type']:'';
        $cache      =   Think\Cache::getInstance($type,$name);
        return $cache;
    }elseif(empty($cache)) { // 自动初始化
        $cache      =   Think\Cache::getInstance();
    }
    if(''=== $value){ // 获取缓存
        return $cache-&gt;get($name);
    }elseif(is_null($value)) { // 删除缓存
        return $cache-&gt;rm($name);
    }else { // 缓存数据
        if(is_array($options)) {
            $expire     =   isset($options['expire'])?$options['expire']:NULL;
        }else{
            $expire     =   is_numeric($options)?$options:NULL;
        }
        return $cache-&gt;set($name, $value, $expire);
    }
}
</code></pre>
<p>坏就坏在这边没有缓存会去set Memcache.class.php创建缓存的代码;</p>
<pre><code class="language-php">	public function write($sessID, $sessData) {
		return $this-&gt;handle-&gt;set($this-&gt;sessionName.$sessID, $sessData, 0, $this-&gt;lifeTime);
	}
</code></pre>
<p>$this-&gt;lifeTime取得</p>
<pre><code class="language-php">protected $lifeTime     = 3600;
	protected $sessionName  = '';
	protected $handle       = null;

    /**
     * 打开Session 
     * @access public 
     * @param string $savePath 
     * @param mixed $sessName  
     */
	public function open($savePath, $sessName) {
		$this-&gt;lifeTime     = C('SESSION_EXPIRE') ? C('SESSION_EXPIRE') : $this-&gt;lifeTime;
</code></pre>
<p>好死不死，配置中SESSION_EXPIRE是0。所以<strong>改配置中SESSION_EXPIRE，确保后续数据的及时清理。</strong></p>
<p>但是之前redis中key怎么清理呢。找了下轮子没有现成的，写了一个python 的脚本</p>
<pre><code class="language-python">import redis

# 匹配test:开头[0-9]结尾的key
prefix = '*'
conn = redis.Redis(host = '172.20.199.5', port=6379, password=&quot;***&quot;)
i = 0
s = 0
for key in conn.scan_iter(match=prefix, count=1000):
    ttltime = conn.ttl(key)
    i = i + 1
    if( (ttltime is None or ttltime == -1) and len(key) == 32 and conn.type(key).decode() == 'string' and not conn.get(key)):
        # 删除匹配到的没有过期时间的key
        print(key, ' - value =', conn.get(key))       
        print(key, ' - key =', conn.type(key))
        conn.delete(key)
        s = s + 1
        print(key, ' - del number=', s)
        

print('total key', i,' -&gt; del ',s)

</code></pre>
<p>完美。今天小雪 晚来天欲雪，能饮一杯无？</p>
]]></summary>
        <content type="html"><![CDATA[<p>这天运维找我反馈说zgyh这个客户的redis内存越来越高，让我们先自查下是否有程序不合理的一直往redis写key。<br>
在排查了java go python 和php 的代码后，我信心满满的给了他一个key的列表和统计计数的脚本</p>
<pre><code class="language-shell">#!/bin/bash

A=$0
B=${A##*/}
C=${B%.*}
running_file_name=$C
running_flag=&quot;run.$running_file_name&quot;

REDIS_CLIENT='redis-cli -a xxxx -x'
function process {
    echo $0
    index=-1
    count=0
    step=100000
    while ((index!=0))
    do
      if [ $index -le 0 ];then
        index=0
      fi
      echo &quot;scan $index match $1 count $step&quot; | $REDIS_CLIENT &gt; $running_file_name.cache
      read index &lt;&lt;&lt; `head -1 $running_file_name.cache`
      read inc &lt;&lt;&lt; `cat $running_file_name.cache | wc -l`
      inc=$((inc - 1))
      if [ $? -ne 0 ];then
        break
      fi
      count=$((count + inc))
    done
    echo &quot;$1 count:&quot;$count
}
#
if [ $# -ne 1 ];then
    echo &quot;$0 &lt;pars&gt;&quot;
    exit 0
fi
#
if [ -f &quot;$running_flag&quot; ] ; then
    echo &quot;is running...&quot;
    exit 0
fi
#
touch $running_flag
#
echo &quot;processing....&quot;
echo $*
process $*
#
rm -rf $running_flag
#
echo &quot;ok!&quot;
</code></pre>
<p>和查bigkey的方法</p>
<pre><code class="language-shell">redis-cli -c -p 6379  -a 密码  --bigkeys 
</code></pre>
<p>运维反馈bigkeys因为版本问题访问不了，根据我提供的业务key查的数量最大的也就W。但是现在生产的key已经达到了几百W。</p>
<p>过了几天，运维反馈说找到了那些幽灵的key，是32位的随机字幕+数字，没有赋值，最要命的是没有设置过期时间且确定是从我们的服务机器发出的请求。</p>
<p>再次走查代码，依旧没有头绪，测试环境的redis环境也没有这些奇怪的key。殚思竭虑两天后，猛地想起这个数据格式和php的session_id很类似。于是检查php的入口方法，果然找到问题。</p>
<pre><code class="language-php">        $time = $this-&gt;isSession();
        if ($this-&gt;skipCheck) return true;
</code></pre>
<p>这个isSession方法</p>
<pre><code class="language-php">    protected function isSession() {
        if ($this-&gt;AccessField == 'FILE') {
            return $this-&gt;isFSession();
        } else {
            return $this-&gt;isRSession();
        }
    }
</code></pre>
<p>在类型不是FILE的情况下会走isRSession</p>
<pre><code class="language-php">    private function isRSession() {
        $PHPSESSID = $_COOKIE['PHPSESSID'];
        if (empty($PHPSESSID)) {
            return;
        }

        $data = S($PHPSESSID);

        if (empty($data)) {
            return;
        }
        /*从缓存服务器同步到本地*/
        if ($data['SYNCH']) {
            $data = array(
                &quot;DATA&quot; =&gt; $data['DATA'],
                &quot;EXPIRE&quot; =&gt; time(),
                &quot;REGIST&quot; =&gt; time()
            );
            $data['SYNCH'] = false;
            /*更新缓存服务器状态*/
        }

        if (!empty($_SESSION[$this-&gt;AccessName])) {
            /*已同步到现在的服务器上*/
            return $_SESSION[$this-&gt;AccessName]['EXPIRE'];
        }

    }
</code></pre>
<p>问题就出在S($PHPSESSID)这句，S方法内容如下</p>
<pre><code class="language-php">function S($name,$value='',$options=null) {
    static $cache   =   '';
    if(strtoupper(C('DATA_CACHE_TYPE')) == 'REDISMS'){
        $cache = Think\Cache\Driver\Redisms::getInstance();
        if(''=== $value){ // 获取缓存
            return $cache-&gt;get($name);
        }elseif(is_null($value)) { // 删除缓存
            return $cache-&gt;rm($name);
        }else{
            if(is_array($options)) {
                $expire     =   isset($options['expire'])?$options['expire']:NULL;
            }else{
                $expire     =   is_numeric($options)?$options:NULL;
            }
            return $cache-&gt;set($name, $value, $expire);
        }
    }

    if(is_array($options)){
        // 缓存操作的同时初始化
        $type       =   isset($options['type'])?$options['type']:'';
        $cache      =   Think\Cache::getInstance($type,$options);
    }elseif(is_array($name)) { // 缓存初始化
        $type       =   isset($name['type'])?$name['type']:'';
        $cache      =   Think\Cache::getInstance($type,$name);
        return $cache;
    }elseif(empty($cache)) { // 自动初始化
        $cache      =   Think\Cache::getInstance();
    }
    if(''=== $value){ // 获取缓存
        return $cache-&gt;get($name);
    }elseif(is_null($value)) { // 删除缓存
        return $cache-&gt;rm($name);
    }else { // 缓存数据
        if(is_array($options)) {
            $expire     =   isset($options['expire'])?$options['expire']:NULL;
        }else{
            $expire     =   is_numeric($options)?$options:NULL;
        }
        return $cache-&gt;set($name, $value, $expire);
    }
}
</code></pre>
<p>坏就坏在这边没有缓存会去set Memcache.class.php创建缓存的代码;</p>
<pre><code class="language-php">	public function write($sessID, $sessData) {
		return $this-&gt;handle-&gt;set($this-&gt;sessionName.$sessID, $sessData, 0, $this-&gt;lifeTime);
	}
</code></pre>
<p>$this-&gt;lifeTime取得</p>
<pre><code class="language-php">protected $lifeTime     = 3600;
	protected $sessionName  = '';
	protected $handle       = null;

    /**
     * 打开Session 
     * @access public 
     * @param string $savePath 
     * @param mixed $sessName  
     */
	public function open($savePath, $sessName) {
		$this-&gt;lifeTime     = C('SESSION_EXPIRE') ? C('SESSION_EXPIRE') : $this-&gt;lifeTime;
</code></pre>
<p>好死不死，配置中SESSION_EXPIRE是0。所以<strong>改配置中SESSION_EXPIRE，确保后续数据的及时清理。</strong></p>
<p>但是之前redis中key怎么清理呢。找了下轮子没有现成的，写了一个python 的脚本</p>
<pre><code class="language-python">import redis

# 匹配test:开头[0-9]结尾的key
prefix = '*'
conn = redis.Redis(host = '172.20.199.5', port=6379, password=&quot;***&quot;)
i = 0
s = 0
for key in conn.scan_iter(match=prefix, count=1000):
    ttltime = conn.ttl(key)
    i = i + 1
    if( (ttltime is None or ttltime == -1) and len(key) == 32 and conn.type(key).decode() == 'string' and not conn.get(key)):
        # 删除匹配到的没有过期时间的key
        print(key, ' - value =', conn.get(key))       
        print(key, ' - key =', conn.type(key))
        conn.delete(key)
        s = s + 1
        print(key, ' - del number=', s)
        

print('total key', i,' -&gt; del ',s)

</code></pre>
<p>完美。今天小雪 晚来天欲雪，能饮一杯无？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[陈年喜 ·《双鱼铜镜》]]></title>
        <id>https://wuyadi.github.io/post/chen-nian-xi-lesslessshuang-yu-tong-jing-greatergreater/</id>
        <link href="https://wuyadi.github.io/post/chen-nian-xi-lesslessshuang-yu-tong-jing-greatergreater/">
        </link>
        <updated>2021-09-16T01:24:03.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[低效能程序员的行为与思维，共勉]]></title>
        <id>https://wuyadi.github.io/post/di-xiao-neng-cheng-xu-yuan-de-xing-wei-yu-si-wei-gong-mian/</id>
        <link href="https://wuyadi.github.io/post/di-xiao-neng-cheng-xu-yuan-de-xing-wei-yu-si-wei-gong-mian/">
        </link>
        <updated>2021-09-11T08:44:32.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[With great power comes great responsibility]]></title>
        <id>https://wuyadi.github.io/post/with-great-power-comes-great-responsibility/</id>
        <link href="https://wuyadi.github.io/post/with-great-power-comes-great-responsibility/">
        </link>
        <updated>2021-08-30T03:30:22.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[代码规范原则]]></title>
        <id>https://wuyadi.github.io/post/dai-ma-gui-fan-yuan-ze/</id>
        <link href="https://wuyadi.github.io/post/dai-ma-gui-fan-yuan-ze/">
        </link>
        <updated>2021-06-17T08:57:28.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于高级程序员的思考(ˇˍˇ)]]></title>
        <id>https://wuyadi.github.io/post/guan-yu-gao-ji-cheng-xu-yuan-de-si-kao-v_v/</id>
        <link href="https://wuyadi.github.io/post/guan-yu-gao-ji-cheng-xu-yuan-de-si-kao-v_v/">
        </link>
        <updated>2021-03-12T12:13:46.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[做面试官一周有感]]></title>
        <id>https://wuyadi.github.io/post/zuo-mian-shi-guan-yi-zhou-you-gan/</id>
        <link href="https://wuyadi.github.io/post/zuo-mian-shi-guan-yi-zhou-you-gan/">
        </link>
        <updated>2020-09-18T12:47:26.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[php导出最终章]]></title>
        <id>https://wuyadi.github.io/post/php-dao-chu-zui-zhong-zhang/</id>
        <link href="https://wuyadi.github.io/post/php-dao-chu-zui-zhong-zhang/">
        </link>
        <updated>2020-09-11T13:33:21.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[奇怪的bug]]></title>
        <id>https://wuyadi.github.io/post/qi-guai-de-bug/</id>
        <link href="https://wuyadi.github.io/post/qi-guai-de-bug/">
        </link>
        <updated>2020-07-23T06:43:58.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[从PHP到GO之导出数据]]></title>
        <id>https://wuyadi.github.io/post/cong-php-dao-go-zhi-dao-chu-shu-ju/</id>
        <link href="https://wuyadi.github.io/post/cong-php-dao-go-zhi-dao-chu-shu-ju/">
        </link>
        <updated>2020-03-25T12:57:13.000Z</updated>
    </entry>
</feed>